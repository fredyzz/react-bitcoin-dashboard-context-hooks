{"version":3,"sources":["API/getCurrencyPrice.js","context/PricesContextProvider.js","components/CryptoInfo.js","context/AlertsContextProvider.js","context/NotificationContextProvider.js.js","components/PriceAlerts.js","components/Notifications.js","components/AlertCreator.js","containers/App.js","serviceWorker.js","index.js"],"names":["getCurrencyPrice","currency","a","fetch","response","json","jsonResponse","console","log","PricesContext","React","createContext","PricesContextProvider","props","useState","bitcoinPrice","setBitcoinPrice","initialState","bitcoinPriceSet","bPrice","Provider","value","children","CryptoInfo","useContext","getBitcoinPrice","price","bitcoin","usd","setInterval","className","AlertsContext","AlertsContextProvider","isActive","setIsActive","lowerPrice","higherPrice","alert","setAlert","addAlert","deleteAlert","toggleAlertState","NotificactionContext","NotificactionContextProvider","notifications","setNotification","notificationId","setNotificationId","notificationAdd","notification","updatedNotifications","length","splice","id","notificationDelete","filteredNotification","filter","PriceAlerts","useEffect","type","description","onClick","Notifications","map","key","AlertCreator","alertPrices","setAlertPrices","state","msg","error","setError","clearInput","e","target","name","handleChange","onFocus","onChange","placeholder","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2449271f.chunk.js","sourcesContent":["const BASE_URL = 'https://api.coingecko.com/api/v3/simple/price?ids='\nconst VS_CURRENCY = '&vs_currencies=usd'\n\nconst getCurrencyPrice = async (currency) => {\n\ttry {\n\t\tconst response = await fetch(BASE_URL + currency + VS_CURRENCY)\n\t\tconst jsonResponse = await response.json()\n\t\treturn jsonResponse\n\t} catch (error) {\n\t\tconsole.log(error)\n\t}\n}\n\nexport default getCurrencyPrice\n","import React, { useState } from 'react'\n\n// ----- Creating context -----\nexport const PricesContext = React.createContext()\n\n// ----- Creating Context Provider -----\n\nexport const PricesContextProvider = (props) => {\n\tconst [bitcoinPrice, setBitcoinPrice] = useState(-1)\n\n\tconst bitcoinPriceSet = (bPrice) => setBitcoinPrice(bPrice)\n\n\tconst initialState = {\n\t\tbitcoinPrice,\n\t\tbitcoinPriceSet\n\t}\n\n\treturn (\n\t\t<PricesContext.Provider value={initialState}>\n\t\t\t{props.children}\n\t\t</PricesContext.Provider>\n\t)\n}\n","import React, { useContext } from 'react'\n//Import API functions\nimport getCurrencyPrice from '../API/getCurrencyPrice'\n//Import context\nimport { PricesContext } from '../context/PricesContextProvider'\n\nconst CryptoInfo = () => {\n\tconst { bitcoinPrice, bitcoinPriceSet } = useContext(PricesContext)\n\n\t//This functions gets the bitcoin price fetching it with the API helper getCurrencyPrice\n\tconst getBitcoinPrice = async () => {\n\t\tconsole.log('Getting bitcoin price...')\n\t\tconst price = await getCurrencyPrice('bitcoin')\n\t\tbitcoinPriceSet(price.bitcoin.usd)\n\t\tconsole.log(price.bitcoin.usd)\n\t}\n\n\t// The bitcoinPrice state is initialized as -1 in the context.\n\t// If bitcoinPrice value is -1, you should call getBitcoin price to update it\n\tif (bitcoinPrice === -1) {\n\t\tgetBitcoinPrice()\n\t}\n\n\t// bitcoinPrice is updated every 5 seconds\n\tsetInterval(() => {\n\t\tgetBitcoinPrice()\n\t}, 5000)\n\n\treturn (\n\t\t<div>\n\t\t\t<h1 className=\"uppercase\">Bitcoin information</h1>\n\t\t\t<h2 className=\"capitalize\">price</h2>\n\t\t\t<span className=\"currency-price\">U$D {bitcoinPrice}</span>\n\t\t</div>\n\t)\n}\n\nexport default CryptoInfo\n","import React, { useState } from 'react'\n\n// ----- Creating context -----\nexport const AlertsContext = React.createContext()\n\n// ----- Creating Context Provider -----\n\nexport const AlertsContextProvider = (props) => {\n\tconst [isActive, setIsActive] = useState(false)\n\tconst [alert, setAlert] = useState({\n\t\tlowerPrice: -1,\n\t\thigherPrice: -1\n\t})\n\n\tconst addAlert = (alert) => {\n\t\tsetAlert(alert)\n\t\tsetIsActive(true)\n\t}\n\n\tconst deleteAlert = () => {\n\t\tsetAlert({\n\t\t\tlowerPrice: -1,\n\t\t\thigherPrice: -1\n\t\t})\n\t}\n\n\tconst toggleAlertState = () => {\n\t\tsetIsActive(!isActive)\n\t}\n\n\tconst initialState = {\n\t\tisActive,\n\t\talert,\n\t\taddAlert: addAlert,\n\t\tdeleteAlert: deleteAlert,\n\t\ttoggleAlertState: toggleAlertState\n\t}\n\n\treturn (\n\t\t<AlertsContext.Provider value={initialState}>\n\t\t\t{props.children}\n\t\t</AlertsContext.Provider>\n\t)\n}\n","import React, { useState } from 'react'\n\n// ----- Creating context -----\nexport const NotificactionContext = React.createContext()\n\n// ----- Creating Context Provider -----\n\nexport const NotificactionContextProvider = (props) => {\n\tconst [notifications, setNotification] = useState([])\n\tconst [notificationId, setNotificationId] = useState(0)\n\n\tconst notificationAdd = (notification) => {\n\t\tlet updatedNotifications = [...notifications]\n\t\tif (updatedNotifications.length > 2) {\n\t\t\tupdatedNotifications.splice(0, 1)\n\t\t}\n\t\tsetNotification([\n\t\t\t...updatedNotifications,\n\t\t\t{ ...notification, id: notificationId }\n\t\t])\n\t\tsetNotificationId(notificationId + 1)\n\t}\n\n\tconst notificationDelete = (id) => {\n\t\tlet filteredNotification = notifications.filter(\n\t\t\t(notification) => notification.id !== id\n\t\t)\n\t\tsetNotification(filteredNotification)\n\t}\n\n\tconst initialState = {\n\t\tnotifications,\n\t\tnotificationAdd,\n\t\tnotificationDelete\n\t}\n\n\treturn (\n\t\t<NotificactionContext.Provider value={initialState}>\n\t\t\t{props.children}\n\t\t</NotificactionContext.Provider>\n\t)\n}\n","import React, { useContext, useEffect } from 'react'\n//Import context\nimport { AlertsContext } from '../context/AlertsContextProvider.js'\nimport { NotificactionContext } from '../context/NotificationContextProvider.js.js'\nimport { PricesContext } from '../context/PricesContextProvider'\n\nconst PriceAlerts = () => {\n\tconst { isActive, alert, deleteAlert, toggleAlertState } = useContext(\n\t\tAlertsContext\n\t)\n\tconst { notificationAdd } = useContext(NotificactionContext)\n\tconst { bitcoinPrice } = useContext(PricesContext)\n\n\t// Every time bitcoinPrice changes, useEffect will check if an alert is active\n\t// \tand if the alert values were reached\n\tuseEffect(() => {\n\t\tif (bitcoinPrice > 0 && isActive === true) {\n\t\t\tif (bitcoinPrice < alert.lowerPrice) {\n\t\t\t\tnotificationAdd({\n\t\t\t\t\ttype: 'Low Price Alert!',\n\t\t\t\t\tdescription: `alert price: ${alert.lowerPrice} - actual price: ${bitcoinPrice}`\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (bitcoinPrice > alert.higherPrice) {\n\t\t\t\tnotificationAdd({\n\t\t\t\t\ttype: 'High Price Alert!',\n\t\t\t\t\tdescription: `alert price: ${alert.higherPrice} - actual price: ${bitcoinPrice}`\n\t\t\t\t})\n\t\t\t}\n\t\t\ttoggleAlertState()\n\t\t}\n\t}, [bitcoinPrice])\n\n\treturn (\n\t\t<div>\n\t\t\t{alert.lowerPrice !== -1 && (\n\t\t\t\t<>\n\t\t\t\t\t<h2>Price alerts</h2>\n\t\t\t\t\t<h4>Bitcoin alert - {isActive ? 'Active' : 'No active'}</h4>\n\t\t\t\t\t<p>{`Lower price: U$D ${alert.lowerPrice} - Higher Price: U$D ${alert.higherPrice} `}</p>\n\n\t\t\t\t\t<button onClick={toggleAlertState}>\n\t\t\t\t\t\t{isActive ? 'Disable' : 'Activate'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={deleteAlert}>Delete</button>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default PriceAlerts\n","import React, { useContext } from 'react'\n//Import context\nimport { NotificactionContext } from '../context/NotificationContextProvider.js'\n\nconst Notifications = () => {\n\tconst { notifications, notificationDelete } = useContext(NotificactionContext)\n\n\treturn (\n\t\tnotifications.length > 0 && (\n\t\t\t<>\n\t\t\t\t{notifications.map((notification) => (\n\t\t\t\t\t<div className=\"notification-item shadow\" key={notification.id}>\n\t\t\t\t\t\t<b>{notification.type}</b>\n\t\t\t\t\t\t<p>{notification.description}</p>\n\t\t\t\t\t\t<button onClick={() => notificationDelete(notification.id)}>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</>\n\t\t)\n\t)\n}\n\nexport default Notifications\n","import React, { useState, useContext } from 'react'\n//Import context\nimport { AlertsContext } from '../context/AlertsContextProvider.js'\n\nconst AlertCreator = () => {\n\tconst { alert, addAlert } = useContext(AlertsContext)\n\tconst [alertPrices, setAlertPrices] = useState({\n\t\tlowerPrice: '',\n\t\thigherPrice: ''\n\t})\n\tconst [error, setError] = useState({ state: false, msg: '' })\n\n\tconst clearInput = (e) => {\n\t\t//Clears input when the user focuses on the input\n\t\tsetAlertPrices({ ...alertPrices, [e.target.name]: '' })\n\t\tsetError({ state: false, msg: '' })\n\t}\n\n\tconst handleChange = (e) => {\n\t\tsetAlertPrices({ ...alertPrices, [e.target.name]: e.target.value })\n\t}\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tif (alertPrices.lowerPrice === '' || alertPrices.higherPrice === '') {\n\t\t\tsetError({ state: true, msg: 'Select alert prices...' })\n\t\t} else {\n\t\t\taddAlert(alertPrices)\n\t\t}\n\t}\n\n\treturn (\n\t\talert.lowerPrice === -1 && (\n\t\t\t//If the user has set an alert, the value of alert.lowerPrice will not be -1\n\t\t\t<div>\n\t\t\t\t<h3 className=\"capitalize\">create alert</h3>\n\t\t\t\t<p className=\"error\">{error.state === true && error.msg}</p>\n\n\t\t\t\t<form>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={alertPrices.lowerPrice}\n\t\t\t\t\t\tname=\"lowerPrice\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonFocus={clearInput}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tplaceholder=\"Lower price\"\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={alertPrices.higherPrice}\n\t\t\t\t\t\tname=\"higherPrice\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonFocus={clearInput}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tplaceholder=\"Higher price\"\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<button onClick={handleSubmit}>Add</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t)\n}\n\nexport default AlertCreator\n","import React, { useContext } from 'react'\n//Import styles\nimport '../styles/App.css'\n//Import componentes\nimport CryptoInfo from '../components/CryptoInfo'\nimport PriceAlerts from '../components/PriceAlerts'\nimport Notifications from '../components/Notifications'\nimport AlertCreator from '../components/AlertCreator'\n//Import context providers\nimport { AlertsContextProvider } from '../context/AlertsContextProvider'\n//Import context\nimport { NotificactionContext } from '../context/NotificationContextProvider.js'\n\nconst App = () => {\n\tconst { notifications } = useContext(NotificactionContext)\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"wrapper shadow\">\n\t\t\t\t<div className=\"wrapper-item\">\n\t\t\t\t\t<CryptoInfo />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrapper-item\">\n\t\t\t\t\t<AlertsContextProvider>\n\t\t\t\t\t\t<AlertCreator />\n\t\t\t\t\t\t<PriceAlerts />\n\t\t\t\t\t</AlertsContextProvider>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"wrapper-notification\">\n\t\t\t\t{notifications.length > 0 && <Notifications />}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n//Import context\nimport { NotificactionContextProvider } from './context/NotificationContextProvider.js'\nimport { PricesContextProvider } from './context/PricesContextProvider.js'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<NotificactionContextProvider>\n\t\t\t<PricesContextProvider>\n\t\t\t\t<App />\n\t\t\t</PricesContextProvider>\n\t\t</NotificactionContextProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}